## 线性 DP + 树状数组 + 同字符最大长度计数

> ~~早上起来没睡醒~~ 老了，脑袋不行了，第一反应是用「线性 DP + 树状数组」来做，估了一下时间复杂度没问题就写了。
> 该做法有一点点思维难度，因此可能不是这道中等题的标准解法。

**定义 $f[i]$ 为以 $s[i]$ 为结尾的最大有效子串的长度。**

从该状态定义容易得到如下的状态转移方程：

* 存在 $s[i - 1]$ 并且 $s[i]$ 能够接在 $s[i - 1]$ 后面（除了 $s[i]$ 为 $s[i - 1]$ 的下一字母以外，还特别包括 $s[i - 1] = z$ 同时 $s[i] = a$ 的情况），则我们有 $f[i] = f[i - 1] + 1$；
* 不存在 $s[i - 1]$ 或者 $s[i]$ 不能接在 $s[i - 1]$ 后面，则有 $f[i] = 1$，含义为 $s[i]$ 只能自身组成子串。

**与此同时，我们知道当结尾元素固定，子串长度固定，对应子串唯一确定。**

当不考虑子串重复问题时，若 $f[i] = k$，则以 $s[i]$ 为结尾的有效子串数量为 $k$ 个（对应以 $s[i]$ 为结尾，长度范围为 $[1, k]$ 的子数组）。

但实际上，我们不能统计相同的子串，因此我们需要考虑该如何去重。

不失一般性地，假设我们当前处理到字符串 `p` 中的第 $i$ 位，以 $s[i]$ 为结尾的最大子串长度为 $f[i]$：

* 此前如果 **出现过** 以 $s[i]$ 为结尾，长度「大于等于」$f[i]$ 的子串的话，那么以 $s[i]$ 为结尾长度为 $f[i]$ 的子串必然已被统计，需要跳过。因此我们可以使用一个长度为 $26$ 的数组 `max`，记录以每个字符 $s[i]$ 结尾的，出现过的最大子串长度为多少（当 `max[s[i]] >= f[i]` 时，跳过计数）；
* 此前如果 **出现过** 以 $s[i]$ 为结尾，长度「小于」$f[i]$ 的子串的话，我们也不能直接统计累加 $f[i]$ 到答案上，这会导致那些以 $s[i]$ 为结尾，长度小于 $f[i]$ 的子串被重复计数，此时我们 **需要知道在以 $s[i]$ 为结尾，长度为 $[1, f[i]]$ 范围内还有多少个子串尚未被统计**，这可以使用「树状数组」解决：在 $[1, f[i]]$ 中总个数为 $a = f[i]$，使用树状数组维护在 $[1, f[i]]$ 中已被统计的数的个数 $b$，那么 $cnt = a - b$ 即是本次可增加的计数，计数完成后我们还需要在树状数组中的 $f[i]$ 位置增加 $cnt$，确保下次查询相同字符结尾长度不小于 $f[i]$ 的已覆盖子串数量时不会出错。

至此，我们通过「树状数组」+「记录同字符最大长度」的方式来分别解决「长度比 $f[i]$ 小」和「长度比 $f[i]$ 大」的重复子串统计问题。

代码：

* []

```Java
class Solution {
    int N = 100010;
    int[][] trs = new int[26][N];
    int[] f = new int[N], max = new int[26];
    int n, ans;
    int lowbit(int x) {
        return x & -x;
    }
    void add(int[] tr, int x, int v) {
        for (int i = x; i <= n + 1; i += lowbit(i)) tr[i] += v;
    }
    int query(int[] tr, int x) {
        int ans = 0;
        for (int i = x; i > 0; i -= lowbit(i)) ans += tr[i];
        return ans;
    }
    public int findSubstringInWraproundString(String _p) {
        char[] cs = _p.toCharArray();
        n = cs.length; 
        for (int i = 0; i < n; i++) {
            int c = cs[i] - 'a';
            if (i == 0) {
                f[i] = 1;
            } else {
                int p = cs[i - 1] - 'a';
                if ((c == 0 && p == 25) || p + 1 == c) f[i] = f[i - 1] + 1;
                else f[i] = 1;
            }
            if (max[c] >= f[i]) continue;
            int cnt = f[i] - query(trs[c], f[i]);
            if (cnt == 0) continue;
            ans += cnt;
            add(trs[c], f[i], cnt);
            max[c] = f[i];
        }
        return ans;
    }
}
```

* 时间复杂度：$O(n\log{n})$
* 空间复杂度：$O(C \times n)$，其中 $C = 26$ 为字符串 `p` 的字符集大小

---

## 线性 DP

对于相同的结尾字符 $c$ 而言，如果在整个动规过程中的最大长度为 $len$，那么以 $c$ 为结尾字符对答案的贡献为 $len$。

基于此，我们只需保留解法一中的 `max` 数组即可，同时利用 $f[i]$ 只依赖于 $f[i - 1]$ 进行更新，因此动规数组也可以使用一个变量来代替。

代码：

* []

```Java
class Solution {
    public int findSubstringInWraproundString(String _p) {
        char[] cs = _p.toCharArray();
        int n = cs.length, ans = 0;
        int[] max = new int[26];
        max[cs[0] - 'a']++;
        for (int i = 1, j = 1; i < n; i++) {
            int c = cs[i] - 'a', p = cs[i - 1] - 'a';
            if ((p == 25 && c == 0) || p + 1 == c) j++;
            else j = 1;
            max[c] = Math.max(max[c], j);
        }
        for (int i = 0; i < 26; i++) ans += max[i];
        return ans;
    }
}
```

* 时间复杂度：$O(n)$
* 空间复杂度：$O(C)$，其中 $C = 26$ 为字符串 `p` 的字符集大小

---

## 最后

**如果有帮助到你，请给题解点个赞和收藏，让更多的人看到 ~ ("▔□▔)/**

也欢迎你 [关注我](https://oscimg.oschina.net/oscnet/up-19688dc1af05cf8bdea43b2a863038ab9e5.png) 和 加入我们的[「组队打卡」](https://leetcode-cn.com/u/ac_oier/)小群 ，提供写「证明」&「思路」的高质量题解。

所有题解已经加入 [刷题指南](https://github.com/SharingSource/LogicStack-LeetCode/wiki)，欢迎 star 哦 ~
