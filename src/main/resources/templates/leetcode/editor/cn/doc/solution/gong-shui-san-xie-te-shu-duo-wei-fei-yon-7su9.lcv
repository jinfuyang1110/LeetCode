## 动态规划

这是一类特殊的多维费用背包问题。

将每个任务看作一个「物品」，完成任务所需要的人数看作「成本」，完成任务得到的利润看作「价值」。

其特殊在于存在一维容量维度需要满足「不低于」，而不是常规的「不超过」。这需要我们对于某些状态作等价变换。

**定义 $f[i][j][k]$ 为考虑前 $i$ 件物品，使用人数不超过 $j$，所得利润至少为 $k$ 的方案数。**

对于每件物品（令下标从 $1$ 开始），我们有「选」和「不选」两种决策：

* 不选：显然有：

$f[i - 1][j][k]$

* 选：首先需要满足人数达到要求（ $j >= group[i - 1]$ ），还需要考虑「至少利润」负值问题：
  如果直接令「利润维度」为 $k - profit[i - 1]$ 可能会出现负值，那么负值是否为合法状态呢？这需要结合「状态定义」来看，由于是「利润至少为 $k$」，因此属于「合法状态」，需要参与转移。
  **由于我们没有设计动规数组存储「利润至少为负权」状态，我们需要根据「状态定义」做一个等价替换，将这个「状态」映射到 $f[i][j][0]$。这主要是利用所有的任务利润都为“非负数”，所以不可能出现利润为负的情况，这时候「利润至少为某个负数 $k$」的方案数其实是完全等价于「利润至少为 $0$」的方案数。**

$f[i - 1][j - group[i - 1]][\max(k - profit[i - 1], 0)]$

最终 $f[i][j][k]$ 为上述两种情况之和.

然后考虑「如何构造有效起始值」问题，还是结合我们的「状态定义」来考虑：

当不存在任何物品（任务）时，所得利用利润必然为 $0$（满足至少为 $0$），同时对人数限制没有要求。

因此可以让所有 $f[0][x][0] = 1$。

代码（一维空间优化代码见 P2）：

* []

```Java
class Solution {
    int mod = (int)1e9+7;
    public int profitableSchemes(int n, int min, int[] gs, int[] ps) {
        int m = gs.length;
        long[][][] f = new long[m + 1][n + 1][min + 1];
        for (int i = 0; i <= n; i++) f[0][i][0] = 1;            
        for (int i = 1; i <= m; i++) {
            int a = gs[i - 1], b = ps[i - 1];
            for (int j = 0; j <= n; j++) {
                for (int k = 0; k <= min; k++) {
                    f[i][j][k] = f[i - 1][j][k];
                    if (j >= a) {
                        int u = Math.max(k - b, 0);
                        f[i][j][k] += f[i - 1][j - a][u];
                        if (f[i][j][k] >= mod) f[i][j][k] -= mod;
                    }
                }
            }
        }
        return (int)f[m][n][min]; 
    }
}
```

* []

```Java
class Solution {
    int mod = (int)1e9+7;
    public int profitableSchemes(int n, int min, int[] gs, int[] ps) {
        int m = gs.length;
        int[][] f = new int[n + 1][min + 1];
        for (int i = 0; i <= n; i++) f[i][0] = 1;            
        for (int i = 1; i <= m; i++) {
            int a = gs[i - 1], b = ps[i - 1];
            for (int j = n; j >= a; j--) {
                for (int k = min; k >= 0; k--) {
                    int u = Math.max(k - b, 0);
                    f[j][k] += f[j - a][u];
                    if (f[j][k] >= mod) f[j][k] -= mod;
                }
            }
        }
        return f[n][min]; 
    }
}
```

* 时间复杂度：$O(m * n * min)$
* 空间复杂度：$O(m * n * min)$

---

## 动态规划（作差法）

这个方案足足调了快一个小时 🤣

先是爆 `long`，然后转用高精度后被卡内存，最终改为滚动数组后~~勉强过了~~（不是，稳稳的过了，之前调得久是我把 `N` 多打了一位，写成 1005 了，`N` 不打错的话，不滚动也是能过的 😭😭😭 ）

基本思路是先不考虑最小利润 `minProfit`，求得所有只受「人数限制」的方案数 `a`，然后求得考虑「人数限制」同时，利润低于 `minProfit`（不超过 `minProfit - 1`）的所有方案数 `b`。

由 `a` - `b` 即是答案。

代码：

* []

```Java
import java.math.BigInteger;
class Solution {
    static int N = 105;
    static BigInteger[][] f = new BigInteger[2][N]; 
    static BigInteger[][][] g = new BigInteger[2][N][N];
    static BigInteger mod = new BigInteger("1000000007");
    
    public int profitableSchemes(int n, int min, int[] gs, int[] ps) {
        int m = gs.length;

        for (int j = 0; j <= n; j++) {
            f[0][j] = new BigInteger("1"); 
            f[1][j] = new BigInteger("0"); 
        }
        for (int j = 0; j <= n; j++) {
            for (int k = 0; k <= min; k++) {
                g[0][j][k] = new BigInteger("1"); 
                g[1][j][k] = new BigInteger("0"); 
            }
        }

        for (int i = 1; i <= m; i++) {
            int a = gs[i - 1], b = ps[i - 1];
            int x = i & 1, y = (i - 1) & 1;
            for (int j = 0; j <= n; j++) {
                f[x][j] = f[y][j];
                if (j >= a) {
                    f[x][j] = f[x][j].add(f[y][j - a]);
                } 
            }
        }
        if (min == 0) return (f[m&1][n]).mod(mod).intValue();

        for (int i = 1; i <= m; i++) {
            int a = gs[i - 1], b = ps[i - 1];
            int x = i & 1, y = (i - 1) & 1;
            for (int j = 0; j <= n; j++) {
                for (int k = 0; k < min; k++) {
                    g[x][j][k] = g[y][j][k];
                    if (j - a >= 0 && k - b >= 0) {
                        g[x][j][k] = g[x][j][k].add(g[y][j - a][k - b]);
                    } 
                }
            }
        }
        return f[m&1][n].subtract(g[m&1][n][min - 1]).mod(mod).intValue();
    }
}
```

* 时间复杂度：第一遍 `DP` 复杂度为 $O(m * n)$；第二遍 `DP` 复杂度为 $O(m * n * min)$。整体复杂度为 $O(m * n * min)$
* 空间复杂度：$O(n * min)$

---

## 其他「背包」问题

看不懂「背包」解决方案？

以下是公主号讲过的「背包专题」系列目录，欢迎 [关注](https://oscimg.oschina.net/oscnet/up-19688dc1af05cf8bdea43b2a863038ab9e5.png) 🍭🍭🍭 ：

1. 01背包 : [背包问题 第一讲](https%3A//mp.weixin.qq.com/s/xmgK7SrTnFIM3Owpk-emmg)

   1. 【练习】01背包 : [背包问题 第二讲](https%3A//mp.weixin.qq.com/s?__biz%3DMzU4NDE3MTEyMA%3D%3D%26mid%3D2247485658%26idx%3D1%26sn%3Df298abe76d9cc058805b6a18d2523db6)

   2. 【学习&练习】01背包 : [背包问题 第三讲](https%3A//mp.weixin.qq.com/s?__biz%3DMzU4NDE3MTEyMA%3D%3D%26mid%3D2247485727%26idx%3D1%26sn%3D2cfb1a43bdb4f47cf4457c58f809deb8)

   3. 【加餐/补充】01 背包：[背包问题 第二十一讲](https%3A//mp.weixin.qq.com/s?__biz%3DMzU4NDE3MTEyMA%3D%3D%26mid%3D2247488868%26idx%3D1%26sn%3D5e54a1d091a8249d3033a28fc299076d)
2. 完全背包 : [背包问题 第四讲](https%3A//mp.weixin.qq.com/s?__biz%3DMzU4NDE3MTEyMA%3D%3D%26mid%3D2247486107%26idx%3D1%26sn%3De5fa523008fc5588737b7ed801caf4c3)

   1. 【练习】完全背包 : [背包问题 第五讲](https%3A//mp.weixin.qq.com/s?__biz%3DMzU4NDE3MTEyMA%3D%3D%26mid%3D2247486225%26idx%3D1%26sn%3Df63388476ccf29e465536a065cffe8d8)

   2. 【练习】完全背包 : [背包问题 第六讲](https%3A//mp.weixin.qq.com/s?__biz%3DMzU4NDE3MTEyMA%3D%3D%26mid%3D2247486435%26idx%3D1%26sn%3D2464b01e9c0fb8d81fcea6dd4ed0ec92)

   3. 【练习】完全背包 : [背包问题 第七讲](https%3A//mp.weixin.qq.com/s?__biz%3DMzU4NDE3MTEyMA%3D%3D%26mid%3D2247486586%26idx%3D1%26sn%3Dda57c4d7d39bcbd2e16c2cc4e21b2361)
3. 多重背包 : [背包问题 第八讲](https%3A//mp.weixin.qq.com/s?__biz%3DMzU4NDE3MTEyMA%3D%3D%26mid%3D2247486649%26idx%3D1%26sn%3Dba09ee2d78377c2ddbb9e43622880133)

4. 多重背包（优化篇）

   1. 【上】多重背包（优化篇）: [背包问题 第九讲](https%3A//mp.weixin.qq.com/s?__biz%3DMzU4NDE3MTEyMA%3D%3D%26mid%3D2247486796%26idx%3D1%26sn%3Da382b38f8aed295410550bb1767437bd)

   2. 【下】多重背包（优化篇）: [背包问题 第十讲](https://mp.weixin.qq.com/s?__biz=MzU4NDE3MTEyMA==&mid=2247486963&idx=1&sn=51d34f0f841122ed9be2335a402041e8&chksm=fd9ca6eccaeb2ffa1abe413177be376799b427b092bfb73c13e7b77e171b460f4c24b3b7d3bc&token=1872331648&lang=zh_CN#rd)
5. 混合背包 : [背包问题 第十一讲](https://mp.weixin.qq.com/s?__biz=MzU4NDE3MTEyMA==&mid=2247487034&idx=1&sn=eaa05b76387d34aa77f7f14f35fa78a4&chksm=fd9ca525caeb2c33095d285222dcee0dd072465bf7288bda0aab39e90a04bb7b1af018b89fd4&token=1872331648&lang=zh_CN#rd)

6. 分组背包 : [背包问题 第十二讲](https://mp.weixin.qq.com/s?__biz=MzU4NDE3MTEyMA==&mid=2247487504&idx=1&sn=9ac523ec0ac14c8634a229f8c3f919d7&chksm=fd9cbb0fcaeb32196b80a40e4408f6a7e2651167e0b9e31aa6d7c6109fbc2117340a59db12a1&token=1936267333&lang=zh_CN#rd)

   1. 【练习】分组背包 : [背包问题 第十三讲](https%3A//mp.weixin.qq.com/s?__biz%3DMzU4NDE3MTEyMA%3D%3D%26mid%3D2247487587%26idx%3D1%26sn%3Dcc18c2e8c3374612113df7ab7fdc8d46)
7. 多维背包

   1. 【练习】多维背包 : [背包问题 第十四讲](https%3A//mp.weixin.qq.com/s?__biz%3DMzU4NDE3MTEyMA%3D%3D%26mid%3D2247487782%26idx%3D1%26sn%3Df6852cea7a28eb2c522dc424270617b5)

   2. 【练习】多维背包 : [背包问题 第十五讲](https%3A//mp.weixin.qq.com/s?__biz%3DMzU4NDE3MTEyMA%3D%3D%26mid%3D2247488103%26idx%3D1%26sn%3D5767d5691b6c87f15ca3182c3742fc79)
8. 树形背包 : [背包问题 第十六讲](https%3A//mp.weixin.qq.com/s?__biz%3DMzU4NDE3MTEyMA%3D%3D%26mid%3D2247488290%26idx%3D1%26sn%3Da9c525e36211710e0ff480e3300e346b)

   1. 【练习篇】树形背包 : [背包问题 第十七讲](https%3A//mp.weixin.qq.com/s?__biz%3DMzU4NDE3MTEyMA%3D%3D%26mid%3D2247488337%26idx%3D1%26sn%3D016e65bdff75841c9041a14adeb24f64)

   2. 【练习篇】树形背包 : [背包问题 第十八讲](https%3A//mp.weixin.qq.com/s?__biz%3DMzU4NDE3MTEyMA%3D%3D%26mid%3D2247488400%26idx%3D1%26sn%3D7ec15fd8dbb8d85fb9a895a7073157ce)
9. 背包求方案数

   1. 【练习】背包求方案数 : [背包问题 第十九讲](https%3A//mp.weixin.qq.com/s?__biz%3DMzU4NDE3MTEyMA%3D%3D%26mid%3D2247488724%26idx%3D1%26sn%3D68b106ec37730b9ce3988195ae45ac7b)

   2. 【练习】背包求方案数 : [背包问题 第十五讲](https%3A//mp.weixin.qq.com/s?__biz%3DMzU4NDE3MTEyMA%3D%3D%26mid%3D2247488103%26idx%3D1%26sn%3D5767d5691b6c87f15ca3182c3742fc79)

   [注：因为之前实在找不到题，这道「求方案数」题作为“特殊”的「多维费用背包问题求方案数」讲过]

10. 背包求具体方案

    1. 【练习】背包求具体方案 : [背包问题 第二十讲](https%3A//mp.weixin.qq.com/s?__biz%3DMzU4NDE3MTEyMA%3D%3D%26mid%3D2247488752%26idx%3D1%26sn%3De7af274d7293558718748d54f7ddade1)
11. 泛化背包
    1. 【练习】泛化背包

---

## 最后

**如果有帮助到你，请给题解点个赞和收藏，让更多的人看到 ~ ("▔□▔)/**

也欢迎你 [关注我](https://oscimg.oschina.net/oscnet/up-19688dc1af05cf8bdea43b2a863038ab9e5.png)（公主号后台回复「送书」即可参与长期看题解学算法送实体书活动）或 加入[「组队打卡」](https://leetcode-cn.com/u/ac_oier/)小群 ，提供写「证明」&「思路」的高质量题解。

所有题解已经加入 [刷题指南](https://github.com/SharingSource/LogicStack-LeetCode/wiki)，欢迎 star 哦 ~
