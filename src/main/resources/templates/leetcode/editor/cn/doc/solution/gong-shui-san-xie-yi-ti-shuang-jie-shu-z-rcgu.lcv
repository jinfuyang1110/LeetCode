## 基本分析

令数组 `arr` 和数组 `queries` 的长度分别为 `n` 和 `m`。

`n` 和 `m` 的数据范围均为 $10^4$，因此 $O(m * n)$ 的暴力做法我们不用考虑了。

数据范围要求我们做到「对数复杂度」或「线性复杂度」。

**本题主要利用异或运算中的「相同数值进行运算结果为 $0$」的特性。**

对于特定数组 $[a1, a2, a3, ... , an]$，要求得任意区间 $[l, r]$ 的异或结果，可以通过 $[1, r]$ 和 $[1, l - 1]$ 的异或结果得出：

$$
xor(l, r) = xor(1, r) ⊕ xor(1, l - 1)
$$

**本质上还是利用集合（区间结果）的容斥原理。只不过前缀和需要利用「减法（逆运算）」做容斥，而前缀异或是利用「相同数值进行异或结果为 $0$（偶数次的异或结果为 $0$）」的特性实现容斥。**

对于「区间求值」问题，之前在 [【题解】307. 区域和检索 - 数组可修改](https://leetcode-cn.com/problems/range-sum-query-mutable/solution/guan-yu-ge-lei-qu-jian-he-wen-ti-ru-he-x-41hv/) 也做过总结。

针对不同的题目，有不同的方案可以选择（假设有一个数组）：

1. 数组不变，求区间和：「前缀和」、「树状数组」、「线段树」
2. 多次修改某个数，求区间和：「树状数组」、「线段树」
3. 多次整体修改某个区间，求区间和：「线段树」、「树状数组」（看修改区间的数据范围）
4. 多次将某个区间变成同一个数，求区间和：「线段树」、「树状数组」（看修改区间的数据范围）

虽然「线段树」能解决的问题最多，但「线段树」代码很长，且常数很大，实际表现不算好。我们只有在不得不用的情况下才考虑「线段树」。

本题我们使用「树状数组」和「前缀和」来求解。

---

## 树状数组

使用「树状数组」分段记录我们某些区间的「异或结果」，再根据 `queries` 中的询问将分段「异或结果」汇总（执行异或运算），得出最终答案。

**代码（感谢 [@Benhao](/u/qubenhao/) 和 [@answerer](/u/answerer/) 同学提供的其他语言版本）：**

* []

```Java
class Solution {
    int n;
    int[] c = new int[100009];
    int lowbit(int x) {
        return x & -x;
    }
    void add(int x, int u) {
        for (int i = x; i <= n; i += lowbit(i)) c[i] ^= u;
    }
    int query(int x) {
        int ans = 0;
        for (int i = x; i > 0; i -= lowbit(i)) ans ^= c[i];
        return ans;
    }
    public int[] xorQueries(int[] arr, int[][] qs) {
        n = arr.length;
        int m = qs.length;
        for (int i = 1; i <= n; i++) add(i, arr[i - 1]);
        int[] ans = new int[m];
        for (int i = 0; i < m; i++) {
            int l = qs[i][0] + 1, r = qs[i][1] + 1;
            ans[i] = query(r) ^ query(l - 1);
        }
        return ans;
    }
}
```

* []

```Python3
class Solution:
    def xorQueries(self, arr: List[int], queries: List[List[int]]) -> List[int]:
        n, m = len(arr), len(queries)
        c = [0] * 100009
        def lowbit(x):
            return x & -x

        def add(x,u):
            i = x
            while i <= n:
                c[i] ^= u
                i += lowbit(i)

        def query(x):
            ans = 0
            i = x
            while i:
                ans ^= c[i]
                i -= lowbit(i)
            return ans

        for i in range(1, n+1):
            add(i, arr[i-1])
        
        ans = [0] * m
        for i in range(m):
            ans[i] = query(queries[i][1] + 1) ^ query(queries[i][0])
        return ans
```

* []

```C++
class Solution {
    int t[30005];
    int n;
public:
    int lowbit(int x){
        return x &( -x);
    }
    void add(int x, int k){
        for(int i = x; i <= n; i += lowbit(i)) t[i] ^= k;
    }
    int query(int x){
        int ans = 0;
        for(int i = x; i > 0; i -=lowbit(i)) ans ^= t[i];
        return ans;
    }
    vector<int> xorQueries(vector<int>& arr, vector<vector<int>>& queries) {
        int n = arr.size();
        this->n = n;
        vector <int> ans;
        memset(t, 0, sizeof(t));
        for(int i = 0; i < n; ++i){
            add(i + 1, arr[i]);
        }
        for(auto & q: queries){
            ans.emplace_back(query(q[1] + 1) ^ query(q[0]));
        }
        return ans;
    }
};
```

* 时间复杂度：令 `arr` 数组长度为 `n`，`qs` 数组的长度为 `m`。创建树状数组复杂度为 $O(n\log{n})$；查询的复杂度为 $O(m\log{n})$。整体复杂度为 $O((n + m) \log{n})$
* 空间复杂度：$O(n)$

---

## 前缀异或

「树状数组」的查询复杂度为 $O(\log{n})$，而本题其实不涉及「修改操作」，我们可以使用「前缀异或」来代替「树状数组」。

虽说「树状数组」也有 $O(n)$ 的创建方式，但这里使用「前缀异或」主要是为了降低查询的复杂度。

**代码（感谢 [@Benhao](/u/qubenhao/) 和 [@zer0fire](/u/zer0fire/) 同学提供的其他语言版本）：**

* []

```Java
class Solution {
    public int[] xorQueries(int[] arr, int[][] qs) {
        int n = arr.length, m = qs.length;
        int[] sum = new int[n + 1];
        for (int i = 1; i <= n; i++) sum[i] = sum[i - 1] ^ arr[i - 1];
        int[] ans = new int[m];
        for (int i = 0; i < m; i++) {
            int l = qs[i][0] + 1, r = qs[i][1] + 1;
            ans[i] = sum[r] ^ sum[l - 1];
        }
        return ans;
    }
}
```

* []

```Python3
class Solution:
    def xorQueries(self, arr: List[int], queries: List[List[int]]) -> List[int]:
        prexor = list(accumulate([0] + arr, xor))
        return [prexor[i] ^ prexor[j + 1] for i, j in queries]
```

* []

```JavaScript
var xorQueries = function(arr, queries) {
    let n = arr.length
    let m = queries.length
    let sum = [n+1]
    for(let i = 1; i <= n; i++) {
        sum[i] = sum[i - 1] ^ arr[i - 1]
    }
    let ans = [m]
    for(let  i = 0; i < m; i++) {
        let l = queries[i][0] + 1
        let r = queries[i][1] + 1
        ans[i] = sum[r] ^ sum[l -1]
    }
    return ans
};
```

* 时间复杂度：令 `arr` 数组长度为 `n`，`qs` 数组的长度为 `m`。预处理前缀和数组复杂度为 $O(n)$；查询的复杂度为 $O(m)$。整体复杂度为 $O(n + m)$
* 空间复杂度：$O(n)$

---

## 最后

**如果有帮助到你，请给题解点个赞和收藏，让更多的人看到 ~ ("▔□▔)/**

也欢迎你 [关注我](https://oscimg.oschina.net/oscnet/up-19688dc1af05cf8bdea43b2a863038ab9e5.png) 和 加入我们的[「组队打卡」](https://leetcode-cn.com/u/ac_oier/)小群 ，提供写「证明」&「思路」的高质量题解。

所有题解已经加入 [刷题指南](https://github.com/SharingSource/LogicStack-LeetCode/wiki)，欢迎 star 哦 ~
