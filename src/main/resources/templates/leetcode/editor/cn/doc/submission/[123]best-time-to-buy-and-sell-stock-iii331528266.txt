class Solution {
    public int maxProfit(int[] prices) {
        int n = prices.length, INF = Integer.MIN_VALUE;
        int[][][] dp = new int[n][2][3];
        dp[0][1][0] = -prices[0];
        for (int i = 1; i < n; i++) {
            dp[i][0][1] = Math.max(dp[i - 1][0][1], (dp[i - 1][1][0] == 0 ? INF : dp[i - 1][1][0]) + prices[i]);
            dp[i][0][2] = Math.max(dp[i - 1][0][2], (dp[i - 1][1][1] == 0 ? INF : dp[i - 1][1][1]) + prices[i]);
            dp[i][1][2] = Math.max(dp[i - 1][1][2], dp[i - 1][0][2] - prices[i]);
            dp[i][1][0] = Math.max(dp[i - 1][1][0], dp[i - 1][0][0] - prices[i]);
            dp[i][1][1] = Math.max(dp[i - 1][1][1], dp[i - 1][0][1] - prices[i]);
        }
        return Math.max(dp[n - 1][0][2], dp[n - 1][0][1]);
    }
}

//total_testcases:214
//total_correct:198
//input_formatted:[6,1,3,2,4,7]
//expected_output:7
//code_output:6
